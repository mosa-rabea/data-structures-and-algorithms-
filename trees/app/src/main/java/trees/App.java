/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    
    public static ArrayList<Integer> breadthFirst(BinaryTree<Integer> tree) {
        ArrayList<Integer> values =new ArrayList<Integer>();
        Queue<Node> breadthFirst = new LinkedList<>();
        if (tree.root != null) {
            breadthFirst.add(tree.root);
            while (!breadthFirst.isEmpty()) {
                Node node = breadthFirst.remove();
                values.add((Integer)node.value);
                if (node.leftChild != null) {
                    breadthFirst.add(node.leftChild);
                }
                if (node.rightChild != null) {
                    breadthFirst.add(node.rightChild);
                }
            }
        }
        return values;
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        //----------------------ch-15-----------------//

        BinarySearchTree<Integer> test = new BinarySearchTree<>(5);
        test.root.leftChild=new Node<>(8);
        test.root.rightChild=new Node<>(10);
        test.root.leftChild.leftChild=new Node<>(1);
        test.root.leftChild.rightChild=new Node<>(3);

        test.add(1);

//        System.out.println(test.contains(3,test.root));
//        System.out.println(test.inOrder(test.root).toString());



        //----------------------ch-16-----------------//
        BinarySearchTree<Integer> maxTest = new BinarySearchTree<>(5);
        maxTest.root.leftChild=new Node<>(8);
        maxTest.root.rightChild=new Node<>(10);
        maxTest.root.leftChild.leftChild=new Node<>(1);
        maxTest.root.leftChild.rightChild=new Node<>(3);

//        System.out.println(maxTest.maximum());

//----------------------ch17-----------------------------------------------//

        BinarySearchTree<Integer> breadthTest = new BinarySearchTree<>(5);
        breadthTest.root.leftChild=new Node<>(8);
        breadthTest.root.rightChild=new Node<>(10);
        breadthTest.root.leftChild.leftChild=new Node<>(1);
        breadthTest.root.leftChild.rightChild=new Node<>(3);

        System.out.println(breadthFirst(breadthTest));

    }






}
